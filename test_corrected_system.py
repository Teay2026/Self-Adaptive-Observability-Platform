#!/usr/bin/env python3
import requests
import time
import json
import threading

def generate_traffic_with_errors(duration=60):
    """G√©n√®re du trafic avec des erreurs pour tester l'adaptation"""
    print(f"G√©n√©ration de trafic avec erreurs pendant {duration} secondes...")
    
    start_time = time.time()
    request_count = 0
    error_count = 0
    
    while time.time() - start_time < duration:
        try:
            # Appeler l'API Go
            response = requests.get('http://localhost:8080/', timeout=1)
            request_count += 1
            
            if response.status_code >= 500:
                error_count += 1
                print(f"   - Requ√™te {request_count}: Erreur {response.status_code}")
            elif request_count % 20 == 0:
                print(f"   - Requ√™te {request_count}: OK")
            
            time.sleep(0.1)
            
        except Exception as e:
            error_count += 1
            print(f"   - Requ√™te {request_count}: Exception {e}")
            time.sleep(0.1)
    
    print(f"Trafic termin√©: {request_count} requ√™tes, {error_count} erreurs")
    return request_count, error_count

def monitor_controller_state():
    """Surveille l'√©tat du contr√¥leur en temps r√©el"""
    print("Surveillance du contr√¥leur en temps r√©el...")
    
    initial_state = None
    last_rate = None
    last_change = None
    
    while True:
        try:
            response = requests.get('http://localhost:9095/api/state')
            if response.ok:
                state = response.json()
                
                if initial_state is None:
                    initial_state = state
                    print(f"   - √âtat initial: rate={state['rate']}, err={state['err']}, p90={state['p90']}")
                
                # D√©tecter les changements de taux
                if last_rate != state['rate']:
                    if last_rate is not None:
                        print(f"   - üîÑ CHANGEMENT D√âTECT√â: {last_rate} ‚Üí {state['rate']}")
                    last_rate = state['rate']
                
                # Afficher les m√©triques en temps r√©el
                if state['err'] is not None:
                    print(f"   - üìä Taux d'erreur: {state['err']:.4f}")
                
                if state['p90'] is not None:
                    print(f"   - ‚è±Ô∏è  Latence p90: {state['p90']:.3f}s")
                
                # Afficher la derni√®re d√©cision
                if state['last'] != last_change:
                    if state['last'] is not None:
                        print(f"   - üìù Derni√®re d√©cision: {state['last']}")
                    last_change = state['last']
                
            time.sleep(3)
            
        except Exception as e:
            print(f"   - ‚ùå Erreur de surveillance: {e}")
            time.sleep(3)

def check_metrics_realtime():
    """V√©rifie les m√©triques en temps r√©el"""
    print("\nV√©rification des m√©triques en temps r√©el:")
    
    try:
        # V√©rifier le taux d'erreur
        response = requests.get('http://localhost:9091/api/v1/query?query=rate(api_errors_total[1m])')
        if response.ok:
            data = response.json()
            if data.get('data', {}).get('result'):
                error_rate = float(data['data']['result'][0]['value'][1])
                print(f"   - Taux d'erreur (1m): {error_rate:.4f}")
            else:
                print("   - Aucun taux d'erreur trouv√©")
        
        # V√©rifier le taux de requ√™tes
        response = requests.get('http://localhost:9091/api/v1/query?query=rate(api_requests_total[1m])')
        if response.ok:
            data = response.json()
            if data.get('data', {}).get('result'):
                request_rate = float(data['data']['result'][0]['value'][1])
                print(f"   - Taux de requ√™tes (1m): {request_rate:.2f} req/s")
            else:
                print("   - Aucun taux de requ√™tes trouv√©")
                
    except Exception as e:
        print(f"   - Erreur lors de la v√©rification des m√©triques: {e}")

def main():
    print("=== TEST DU SYST√àME CORRIG√â ===\n")
    
    # V√©rifier l'√©tat initial
    print("1. √âtat initial du contr√¥leur:")
    try:
        response = requests.get('http://localhost:9095/api/state')
        if response.ok:
            state = response.json()
            print(f"   - Taux de sampling: {state['rate']}")
            print(f"   - Taux d'erreur: {state['err']}")
            print(f"   - Latence p90: {state['p90']}")
        else:
            print(f"   - Erreur: {response.status_code}")
    except Exception as e:
        print(f"   - Exception: {e}")
    
    print("\n2. D√©marrage de la surveillance du contr√¥leur...")
    monitor_thread = threading.Thread(target=monitor_controller_state, daemon=True)
    monitor_thread.start()
    
    print("\n3. V√©rification des m√©triques initiales...")
    check_metrics_realtime()
    
    print("\n4. G√©n√©ration de trafic avec erreurs...")
    time.sleep(2)  # Laisser le temps √† la surveillance de d√©marrer
    
    # G√©n√©rer du trafic
    request_count, error_count = generate_traffic_with_errors(duration=45)
    
    print(f"\n5. R√©sultats du test:")
    print(f"   - Total des requ√™tes: {request_count}")
    print(f"   - Total des erreurs: {error_count}")
    print(f"   - Taux d'erreur: {error_count/request_count*100:.2f}%")
    
    # Attendre un peu plus pour voir l'adaptation
    print("\n6. Attente de l'adaptation du contr√¥leur...")
    time.sleep(20)
    
    # V√©rifier l'√©tat final
    print("\n7. √âtat final du contr√¥leur:")
    try:
        response = requests.get('http://localhost:9095/api/state')
        if response.ok:
            state = response.json()
            print(f"   - Taux de sampling final: {state['rate']}")
            print(f"   - Taux d'erreur final: {state['err']}")
            print(f"   - Latence p90 finale: {state['p90']}")
            
            if state['rate'] != 1.0:
                print(f"   - ‚úÖ SUCC√àS: Le contr√¥leur s'est adapt√© de 1.0 √† {state['rate']}!")
            else:
                print(f"   - ‚ö†Ô∏è  Le contr√¥leur n'a pas chang√© le taux de sampling")
                
            if state['err'] is not None:
                print(f"   - ‚úÖ SUCC√àS: Le contr√¥leur peut maintenant lire le taux d'erreur!")
            else:
                print(f"   - ‚ùå Le contr√¥leur ne peut toujours pas lire le taux d'erreur")
        else:
            print(f"   - Erreur: {response.status_code}")
    except Exception as e:
        print(f"   - Exception: {e}")
    
    print("\n8. M√©triques finales:")
    check_metrics_realtime()
    
    print("\n=== TEST TERMIN√â ===")

if __name__ == "__main__":
    main() 