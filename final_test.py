#!/usr/bin/env python3
import requests
import time
import json
import threading

def generate_continuous_traffic(duration=60):
    """G√©n√®re du trafic continu pour tester l'adaptation"""
    print(f"G√©n√©ration de trafic continu pendant {duration} secondes...")
    
    start_time = time.time()
    request_count = 0
    error_count = 0
    
    while time.time() - start_time < duration:
        try:
            # Appeler l'API Go
            response = requests.get('http://localhost:8080/', timeout=1)
            request_count += 1
            
            if response.status_code >= 500:
                error_count += 1
                print(f"   - Requ√™te {request_count}: Erreur {response.status_code}")
            elif request_count % 20 == 0:
                print(f"   - Requ√™te {request_count}: OK")
            
            time.sleep(0.1)
            
        except Exception as e:
            error_count += 1
            print(f"   - Requ√™te {request_count}: Exception {e}")
            time.sleep(0.1)
    
    print(f"Trafic termin√©: {request_count} requ√™tes, {error_count} erreurs")
    return request_count, error_count

def monitor_controller():
    """Surveille l'√©tat du contr√¥leur"""
    print("Surveillance du contr√¥leur...")
    
    initial_state = None
    last_rate = None
    
    while True:
        try:
            response = requests.get('http://localhost:9095/api/state')
            if response.ok:
                state = response.json()
                
                if initial_state is None:
                    initial_state = state
                    print(f"   - √âtat initial: rate={state['rate']}, err={state['err']}, p90={state['p90']}")
                
                if last_rate != state['rate']:
                    print(f"   - üîÑ Changement de taux: {last_rate} ‚Üí {state['rate']}")
                    last_rate = state['rate']
                
                if state['err'] is not None:
                    print(f"   - üìä Taux d'erreur d√©tect√©: {state['err']:.4f}")
                
                if state['p90'] is not None:
                    print(f"   - ‚è±Ô∏è  Latence p90: {state['p90']:.3f}s")
                
            time.sleep(5)
            
        except Exception as e:
            print(f"   - ‚ùå Erreur de surveillance: {e}")
            time.sleep(5)

def main():
    print("=== TEST FINAL DU SYST√àME D'ADAPTATION ===\n")
    
    # V√©rifier l'√©tat initial
    print("1. √âtat initial du contr√¥leur:")
    try:
        response = requests.get('http://localhost:9095/api/state')
        if response.ok:
            state = response.json()
            print(f"   - Taux de sampling: {state['rate']}")
            print(f"   - Taux d'erreur: {state['err']}")
            print(f"   - Latence p90: {state['p90']}")
        else:
            print(f"   - Erreur: {response.status_code}")
    except Exception as e:
        print(f"   - Exception: {e}")
    
    print("\n2. D√©marrage de la surveillance du contr√¥leur...")
    monitor_thread = threading.Thread(target=monitor_controller, daemon=True)
    monitor_thread.start()
    
    print("\n3. G√©n√©ration de trafic continu...")
    time.sleep(2)  # Laisser le temps √† la surveillance de d√©marrer
    
    # G√©n√©rer du trafic
    request_count, error_count = generate_continuous_traffic(duration=45)
    
    print(f"\n4. R√©sultats du test:")
    print(f"   - Total des requ√™tes: {request_count}")
    print(f"   - Total des erreurs: {error_count}")
    print(f"   - Taux d'erreur: {error_count/request_count*100:.2f}%")
    
    # V√©rifier l'√©tat final
    print("\n5. √âtat final du contr√¥leur:")
    try:
        response = requests.get('http://localhost:9095/api/state')
        if response.ok:
            state = response.json()
            print(f"   - Taux de sampling final: {state['rate']}")
            print(f"   - Taux d'erreur final: {state['err']}")
            print(f"   - Latence p90 finale: {state['p90']}")
            
            if state['rate'] != 1.0:
                print(f"   - ‚úÖ SUCC√àS: Le contr√¥leur s'est adapt√©!")
            else:
                print(f"   - ‚ö†Ô∏è  Le contr√¥leur n'a pas chang√© le taux de sampling")
        else:
            print(f"   - Erreur: {response.status_code}")
    except Exception as e:
        print(f"   - Exception: {e}")
    
    print("\n=== TEST TERMIN√â ===")

if __name__ == "__main__":
    main() 